# generated by datamodel-codegen:
#   filename:  analytics.yaml
#   timestamp: 2025-04-12T13:47:24+00:00

from __future__ import annotations

from enum import Enum
from typing import Any

from pydantic import BaseModel, Field, conint


class HourlyStatusMetric(BaseModel):
    date: str | None = None
    hour: conint(ge=0, le=23) | None = None
    status: int | None = None
    count: int | None = None
    total_duration: int | None = None
    average_duration: float | None = Field(
        None, description="Calculated as total_duration / count"
    )


class HourlyOrderMetric(BaseModel):
    date: str | None = None
    hour: conint(ge=0, le=23) | None = None
    throughput: int | None = None


class CustomerLifetimeMetric(BaseModel):
    customer_id: int | None = None
    order_count: int | None = None
    first_order_at: str | None = None
    last_order_at: str | None = None
    avg_order_frequency_days: float | None = Field(
        None, description="Average days between orders"
    )


class Status(Enum):
    pending = "pending"
    running = "running"
    completed = "completed"
    failed = "failed"


class JobStatus(BaseModel):
    status: Status | None = None
    timestamp: str | None = None
    details: dict[str, Any] | None = None


class Error(BaseModel):
    detail: str | None = None
