openapi: 3.0.3
info:
  title: Restaurant Order API
  description: API for managing restaurant orders (front/back office)
  version: 1.0.0
servers:
  - url: /api/v1
    description: Version 1 API endpoint
paths:
  /orders/{order_id}:
    get:
      summary: Get an order by ID
      operationId: getOrderById
      tags: [ Orders ]
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: ID of the order to retrieve
      responses:
        '200':
          description: Order retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

  /orders:
    post:
      summary: Create a new order
      operationId: createOrder
      tags: [Orders]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderCreate'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

  /orders/{order_id}/status:
    put:
      summary: Update order status
      operationId: updateOrderStatus
      tags: [ Order Status ]
      parameters:
        - name: order_id
          in: path
          required: true
          schema:
            type: integer
            format: int64
          description: The unique identifier of the order
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusUpdate'
      responses:
        '201':
          description: Status updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OrderStatus'
        '400':
          description: Invalid status or request format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '404':
          description: Order not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPError'

components:
  schemas:
    OrderStatusEnum:
      type: integer
      enum: [ 1, 2, 3, 4, 5 ]
      x-enum-varnames: [ RECEIVED, PREPARING, READY_FOR_PICKUP, COMPLETED, CANCELED ]
      description: |
        Order status codes:
        - 1: Received
        - 2: Preparing
        - 3: Ready for pickup
        - 4: Completed
        - 5: Canceled

    OrderStatusUpdate:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
      required: [ status ]
      example:
        status: 2

    OrderCreate:
      type: object
      properties:
        account_id:
          type: string
        brand_id:
          type: string
        channel_order_id:
          type: string
        customer_id:
          type: integer
          format: int64
        address_id:
          type: integer
          format: int64
        pickup_time:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItemCreate'
      required: [ account_id, brand_id, channel_order_id, customer_id, address_id, pickup_time, items ]
      example:
        account_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        brand_id: "3fa85f64-5717-4562-b3fc-2c963f66afa6"
        channel_order_id: "ORD-12345"
        customer_id: 42
        address_id: 123
        pickup_time: "2025-04-10T14:30:00Z"
        items:
          - name: "Cheeseburger"
            plu: "BRG001"
            quantity: 2

    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        account_id:
          type: string
        brand_id:
          type: string
        channel_order_id:
          type: string
        customer:
          $ref: '#/components/schemas/Customer'
        delivery_address:
          $ref: '#/components/schemas/Address'
        pickup_time:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        status_history:
          type: array
          items:
            $ref: '#/components/schemas/OrderStatus'
      required: [ id, channel_order_id, customer_id, address_id, pickup_time, created_at, items, status_history ]

    OrderItemCreate:
      type: object
      properties:
        name:
          type: string
        plu:
          type: string
        quantity:
          type: integer
          minimum: 1
      required: [ name, plu, quantity ]

    OrderItem:
      type: object
      properties:
        id:
          type: integer
          format: int64
        order_id:
          type: integer
          format: int64
        name:
          type: string
        plu:
          type: string
        quantity:
          type: integer
          minimum: 1
      required: [ id, order_id, name, plu, quantity ]

    OrderStatus:
      type: object
      properties:
        id:
          type: integer
          format: int64
        order_id:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/OrderStatusEnum'
        timestamp:
          type: string
          format: date-time
        duration:
          type: integer
          format: int32
          description: Computed duration in seconds
      required: [ id, order_id, status, timestamp ]

    HTTPError:
      type: object
      properties:
        status_code:
          type: integer
          format: int32
        message:
          type: string
        detail:
          type: string
      required: [ status_code, message ]
      example:
        status_code: 400
        message: "Bad Request"
        detail: "Invalid status value"

    Customer:
      type: object
      properties:
        name:
          type: string
        phoneNumber:
          type: string
      required: [ name, phoneNumber ]
      example:
        name: "John Doe"
        phoneNumber: "+123456789"

    Address:
      type: object
      properties:
        city:
          type: string
        street:
          type: string
        postalCode:
          type: string
      required: [ city, street, postalCode ]
      example:
        city: "Helsinki"
        street: "Huuvatie 1"
        postalCode: "00100"
